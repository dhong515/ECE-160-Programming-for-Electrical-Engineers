The project we (i.e. Nathaniel and Danny (Hong)) are planning to do is to implement the game Go using the language c++. The rules of the game we plan on working from can be found at https://www.britgo.org/intro/intro2.html. The game will be played through the command line interface. At the start, the game will prompt the user with "What size of board do you wish to play on? (9/13/15/19): " and accept user input. It will also ask "How many starting stones does player 2 get?", and accept a number from 0 to 9 and place down free white stones in accordance with the rules of Go. After this, it will print out the board, using the hyphen (-) and pipelink (|) to build the grid, and the symbols 'W' and 'B' to signify white and black stones, respectively. If we have time, we may consider using additional libraries (such as locale.h, or perhaps a C++ equivalent) to replace the hyphens with M dashes.

Regarding the implementation, it will be built purely in C++. We're not totally sure which classes we'll use, but some top contenders (some or all of which may end up integrated into the final product) include a board class to manage the board as a whole, and a string class to manage each string. The board class would consist of a 2D array of chars, as well as a function for printing the board and for inputing to the board. The string class would include a char to signify whose string it was, an array of point structs to signify members of the string, and an array of available liberties. It would include functions for adding points to the string, concantanating two (or more) strings, checking if a point is in a liberty of that string, and perhaps other functions as well (depending on exact implementation). Most likely the board class will manage all of the string classes in some way, but we're not exactly sure how we will yet.



Another project idea that we have is to create a chess game. The beginning of the game will have prompt a user input saying, "Let's play chess! Do you want to be black or white?" in which the user would answer B for black or W for white. We will follow the standard rules for chess: which can be found here http://www.chesscoachonline.com/chess-articles/chess-rules. We will implement a board function similar to the ones created for tic tac toe and SOS but with a 8x8 one instead. We will try to color tiles black and white possibly using C++ graphic displays and color pieces black or white as well. A difficult part might be creating the pieces so that they look similar to the actualpieces(for example, creating a knight piece that will resemble a horse structure). This game also is based on player and cpu turns, so we will program it similarly to tic tac toe in which a player movement will prompt the computer to make a move and so on. The game would be tough since the rules of chess are very complex and we would have tolimit each chess piece's moves quite a bit. It may also be hard to generate AI response to player movement since there's so many possible moves that could be played at oneparticular instance and even more difficult is how we can adjust difficulty levels by prompting AI toplay relatively better moves by somehow implementing knowledge of the game to them in some way for each diffuculty level.